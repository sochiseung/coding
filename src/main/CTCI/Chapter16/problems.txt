16.1 Explain the following terms: virtual memory, page fault, thrashing.


16.2 What is a Branch Target buffer? Explain how it can be used in reducing bubble cycles in cases of branch misprediction.


16.3 Describe direct memory access (DMA). Can a user level buffer / pointer be used by kernel or drivers?


16.4 Write a step by step execution of things that happen after a user presses a key on the keyboard. Use as much detail as possible.


16.5 Write a program to find whether a machine is big endian or little endian.


16.6 Discuss how would you make sure that a process doesnâ€™t access an unauthorized part of the stack.


16.7 What are the best practices to prevent reverse engineering of DLLs?


16.8 A device boots with an empty FIFO queue. In the first 400 ns period after startup, and in each subsequent 400 ns period, a maximum of 80 words will be written to the queue. Each write takes 4 ns. A worker thread requires 3 ns to read a word, and 2 ns to process it before reading the next word. What is the shortest depth of the FIFO such that no data is lost?


16.9 Write an aligned malloc & free function that takes number of bytes and aligned byte (which is always power of 2)
EXAMPLE
align_malloc (1000,128) will return a memory address that is a multiple of 128 and that points to memory of size 1000 bytes.
aligned_free() will free memory allocated by align_malloc.


16.10 Write a function called my2DAlloc which allocates a two dimensional array. Minimize the number of calls to malloc and make sure that the memory is accessible by the notation arr[i][j].